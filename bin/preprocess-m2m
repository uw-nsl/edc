#! /usr/bin/env python3
from __future__ import annotations

from typing import TYPE_CHECKING

import logging, os
from zipfile import ZipFile, ZIP_DEFLATED
from argparse import ArgumentParser

from edc import utils
from edc.data import METADATA_PATH

if TYPE_CHECKING:
    from typing import TypedDict

    from edc.types import TODSpans, TODDomainSpans, TODDomainAction, TODAction, \
        TODDomainState, TODState, TODRound, TODDialog, TODMetadata

    class M2MStateSlot(TypedDict):
        slot: str
        value: str

    class M2MSlot(TypedDict):
        slot: str
        start: int
        exclusive_end: int
    
    class M2MAction(TypedDict, total=False):
        slot: str
        type: str
        value: str

    class M2MUtterance(TypedDict):
        slots: list[M2MSlot]
        text: str
        tokens: list[str]

    class M2MTurn(TypedDict, total=False):
        dialogue_state: list[M2MStateSlot]
        user_acts: list[M2MAction]
        user_utterance: M2MUtterance
        system_acts: list[M2MAction]
        system_utterance: M2MUtterance

    class M2MDialog(TypedDict):
        dialogue_id: str
        turns: list[M2MTurn]
    
    M2MVariants = dict[str, tuple[str, str]]

logger = logging.getLogger(__name__)

def normalize_intent_slot_name(text: str) -> str:
    return text.replace("_", " ").lower()

def normalize_slot_value(text: str) -> str:
    text = text.lower()

    # Special handling for "don't care"
    if text=="dontcare":
        text = "@notcare"
    
    return text

def convert_spans(tokens: list[str], raw_spans: list[M2MSlot], domain: str) -> TODSpans:
    char_indices: list[int] = []
    current_pos = 0

    # Build token-to-character index mapping
    for token in tokens:
        char_indices.append(current_pos)
        # "1" for the space between tokens
        current_pos += len(token)+1
    # End location
    char_indices.append(current_pos)

    domain_spans: TODDomainSpans = {}
    # Convert spans
    for raw_span in raw_spans:
        slot_name = normalize_intent_slot_name(raw_span["slot"])

        span_start = char_indices[raw_span["start"]]
        span_end = char_indices[raw_span["exclusive_end"]]-1

        domain_spans.setdefault(slot_name, []).append((span_start, span_end))
    
    return {domain: domain_spans} if domain_spans else {}

def convert_actions(raw_actions: list[M2MAction], utterance: str, spans: TODSpans, domain: str) -> TODAction:
    domain_action: TODDomainAction = {}

    for raw_action in raw_actions:
        intent = normalize_intent_slot_name(raw_action["type"])
        slots = domain_action.setdefault(intent, {})

        # Special handling for "inform" intent
        if intent=="inform":
            for slot_name, slot_spans in spans.get(domain, {}).items():
                slots[slot_name] = [
                    normalize_slot_value(utterance[span[0]:span[1]]) \
                    for span in slot_spans
                ]
        else:
            slot_name = normalize_intent_slot_name(raw_action.get("slot", "@none"))
            slot_value = normalize_slot_value(raw_action.get("value", "@none"))
            
            slots.setdefault(slot_name, []).append(slot_value)
    
    return {domain: domain_action} if domain_action else {}

def convert_state(raw_state: list[M2MStateSlot], domain: str) -> TODState:
    domain_state: TODDomainState = {}

    for raw_slot in raw_state:
        slot_name = normalize_intent_slot_name(raw_slot["slot"])
        slot_value = normalize_slot_value(raw_slot["value"])

        domain_state[slot_name] = slot_value
    
    return {domain: domain_state} if domain_state else {}

M2M_DUMMY_SYS_RESP = "bye ."
M2M_DUMMY_SYS_DOMAIN_ACTION: TODDomainAction = {"good bye": {"@none": ["@none"]}}

def convert_m2m_dialog(raw_dialog: M2MDialog, domain: str, dataset_name: str) -> TODDialog:
    turns = raw_dialog["turns"]
    rounds: list[TODRound] = []

    for i in range(len(turns)):
        turn = turns[i]
        
        user_raw_utterance = turn["user_utterance"]
        # User input
        user_input_tokens = user_raw_utterance["tokens"]
        user_input = " ".join(user_input_tokens)
        # Convert user spans
        user_spans = convert_spans(user_input_tokens, user_raw_utterance["slots"], domain)
        # Convert user actions
        user_action = convert_actions(turn["user_acts"], user_input, user_spans, domain)
        # Convert dialog state
        state = convert_state(turn["dialogue_state"], domain)

        if i<len(turns)-1:
            next_turn = turns[i+1]

            sys_raw_utterance = next_turn["system_utterance"]
            # Tokens of system utterance
            sys_resp_tokens = sys_raw_utterance["tokens"]
            sys_resp = " ".join(sys_resp_tokens)
            # Convert system spans
            sys_spans = convert_spans(sys_resp_tokens, sys_raw_utterance["slots"], domain)
            # Convert system actions
            sys_action = convert_actions(next_turn["system_acts"], sys_resp, sys_spans, domain)
        # Make dummy annotations for last turn
        else:
            sys_resp = M2M_DUMMY_SYS_RESP
            sys_spans: TODSpans = []
            sys_action = {domain: M2M_DUMMY_SYS_DOMAIN_ACTION}

        # Store current round
        rounds.append({
            "user_input": user_input,
            "user_action": user_action,
            "user_spans": user_spans,
            "sys_resp": sys_resp,
            "sys_action": sys_action,
            "sys_spans": sys_spans,
            "state": state
        })
    
    return {
        "name": f"{dataset_name}/{raw_dialog['dialogue_id']}.json",
        "rounds": rounds
    }

M2M_SUBSETS = ("train", "dev", "test")

def convert_save_m2m_dialogs(m2m_dir: str, output_path: str, variants: M2MVariants, pretty: bool,
    dataset_name: str):
    # Dataset metadata
    metadata: TODMetadata = {
        "name": dataset_name,
        "subsets": {subset: [] for subset in M2M_SUBSETS}
    }
    # JSON indentation
    indent = 4 if pretty else None

    with ZipFile(output_path, "w", ZIP_DEFLATED) as f_archive:
        for subset in M2M_SUBSETS:
            subset_dialogs = metadata["subsets"][subset]

            for variant, (domain, variant_dir) in variants.items():
                logger.info(f"Processing subset '{subset}' for variant '{variant}' ...")

                # Load raw dialogs
                raw_dialogs_path = os.path.join(m2m_dir, variant_dir, subset+".json")
                raw_dialogs: list[M2MDialog] = utils.load_json(raw_dialogs_path)
                
                # Convert and save dialogs
                for raw_dialog in raw_dialogs:
                    dialog = convert_m2m_dialog(raw_dialog, domain, dataset_name)

                    # Add dialog to subset
                    subset_dialogs.append(dialog["name"])
                    # Save dialog to archive
                    utils.save_json(dialog, dialog["name"], root=f_archive, indent=indent)
        
        # Sort subset dialog names
        for subset_dialogs in metadata["subsets"].values():
            subset_dialogs.sort()
        # Save dataset metadata
        utils.save_json(metadata, METADATA_PATH, root=f_archive, indent=indent)

M2M_DEFAULT_NAME = "m2m"
M2M_VARIANTS: M2MVariants = {
    "sim-m": ("movie", "sim-M"),
    "sim-r": ("restaurant", "sim-R"),
}

def main():
    parser = ArgumentParser()
    # CLI arguments
    parser.add_argument(
        "-d", "--m2m-dir", required=True, help="path to M2M dataset directory"
    )
    parser.add_argument(
        "-o", "--output", default=M2M_DEFAULT_NAME+".zip",
        help="path to save converted dataset archive"
    )
    parser.add_argument(
        "-v", "--variant", action="append", choices=list(M2M_VARIANTS.keys()),
        help="M2M variant to be included during conversion"
    )
    parser.add_argument(
        "-p", "--pretty", default=False, action="store_true",
        help="pretty-print JSON of converted dialogs"
    )
    parser.add_argument(
        "-n", "--name", default=M2M_DEFAULT_NAME, help="name of converted dataset"
    )
    # Parse CLI arguments
    args = parser.parse_args()

    if args.variant:
        variants = {
            variant: variant_info for variant, variant_info in M2M_VARIANTS.items() \
            if variant in args.variant
        }
    else:
        variants = M2M_VARIANTS

    utils.setup_logging()
    convert_save_m2m_dialogs(
        args.m2m_dir, args.output, variants, args.pretty, args.name
    )

if __name__=="__main__":
    main()
